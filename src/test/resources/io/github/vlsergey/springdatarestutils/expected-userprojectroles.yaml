openapi: 3.0.1
info:
  title: ToOpenApiActionImplTest Spring Data REST OpenAPI Specification
  description: This is automatically generated OpenAPI Specification for Spring Data
    REST entities and repositories
  version: 0.0.1-SNAPSHOT
servers:
- url: /api
paths:
  /projects:
    get:
      tags:
      - Project
      description: Find entities
      parameters:
      - name: page
        in: query
        description: Results page you want to retrieve (0..N)
        schema:
          minimum: 0
          type: integer
          format: int32
          nullable: false
      - name: size
        in: query
        description: Number of records per page
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          nullable: false
      - name: sort
        in: query
        description: Sorting parameters
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                required:
                - _embedded
                - _links
                - page
                type: object
                properties:
                  _embedded:
                    required:
                    - projects
                    type: object
                    properties:
                      projects:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProjectWithLinks'
                  _links:
                    required:
                    - profile
                    - search
                    - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/Link'
                      profile:
                        $ref: '#/components/schemas/Link'
                      search:
                        $ref: '#/components/schemas/Link'
                  page:
                    required:
                    - number
                    - size
                    - totalElements
                    - totalPages
                    type: object
                    properties:
                      size:
                        minimum: 0
                        type: integer
                        format: int32
                        nullable: false
                      totalElements:
                        minimum: 0
                        type: integer
                        format: int64
                        nullable: false
                      totalPages:
                        minimum: 0
                        type: integer
                        format: int32
                        nullable: false
                      number:
                        minimum: 0
                        type: integer
                        format: int32
                        nullable: false
    post:
      tags:
      - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProjectRequest'
        required: true
      responses:
        "200":
          description: Entity has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWithLinks'
        "204":
          description: Entity has been created
  /projects/{id}:
    get:
      tags:
      - Project
      description: Retrieves an entity by its id
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Entity is present
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWithLinks'
        "404":
          description: Entity is missing
    put:
      tags:
      - Project
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      responses:
        "204":
          description: Entity has been updated
    delete:
      tags:
      - Project
      description: Deletes the entity with the given id
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: Entity has been deleted or already didn't exists
    patch:
      tags:
      - Project
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPatch'
        required: true
      responses:
        "204":
          description: Entity has been updated
  /projects/{id}/userProjectRoles:
    get:
      tags:
      - Project
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                required:
                - _embedded
                - _links
                - page
                type: object
                properties:
                  _embedded:
                    required:
                    - userProjectRoles
                    type: object
                    properties:
                      userProjectRoles:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserProjectRoleWithLinks'
                  _links:
                    required:
                    - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/Link'
        "404":
          description: Entity is missing
  /userProjectRoles:
    get:
      tags:
      - UserProjectRole
      description: Find entities
      parameters:
      - name: page
        in: query
        description: Results page you want to retrieve (0..N)
        schema:
          minimum: 0
          type: integer
          format: int32
          nullable: false
      - name: size
        in: query
        description: Number of records per page
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          nullable: false
      - name: sort
        in: query
        description: Sorting parameters
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                required:
                - _embedded
                - _links
                - page
                type: object
                properties:
                  _embedded:
                    required:
                    - userProjectRoles
                    type: object
                    properties:
                      userProjectRoles:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserProjectRoleWithLinks'
                  _links:
                    required:
                    - profile
                    - search
                    - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/Link'
                      profile:
                        $ref: '#/components/schemas/Link'
                      search:
                        $ref: '#/components/schemas/Link'
                  page:
                    required:
                    - number
                    - size
                    - totalElements
                    - totalPages
                    type: object
                    properties:
                      size:
                        minimum: 0
                        type: integer
                        format: int32
                        nullable: false
                      totalElements:
                        minimum: 0
                        type: integer
                        format: int64
                        nullable: false
                      totalPages:
                        minimum: 0
                        type: integer
                        format: int32
                        nullable: false
                      number:
                        minimum: 0
                        type: integer
                        format: int32
                        nullable: false
    post:
      tags:
      - UserProjectRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserProjectRoleRequest'
        required: true
      responses:
        "200":
          description: Entity has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjectRoleWithLinks'
        "204":
          description: Entity has been created
  /userProjectRoles/{id}:
    get:
      tags:
      - UserProjectRole
      description: Retrieves an entity by its id
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Entity is present
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjectRoleWithLinks'
        "404":
          description: Entity is missing
    put:
      tags:
      - UserProjectRole
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProjectRoleRequest'
        required: true
      responses:
        "204":
          description: Entity has been updated
    delete:
      tags:
      - UserProjectRole
      description: Deletes the entity with the given id
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Entity has been deleted or already didn't exists
    patch:
      tags:
      - UserProjectRole
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProjectRolePatch'
        required: true
      responses:
        "204":
          description: Entity has been updated
  /userProjectRoles/{id}/project:
    get:
      tags:
      - UserProjectRole
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Entity is present
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        "404":
          description: Entity is missing
  /userProjectRoles/{id}/user:
    get:
      tags:
      - UserProjectRole
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Entity is present
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Entity is missing
  /users:
    get:
      tags:
      - User
      description: Find entities
      parameters:
      - name: page
        in: query
        description: Results page you want to retrieve (0..N)
        schema:
          minimum: 0
          type: integer
          format: int32
          nullable: false
      - name: size
        in: query
        description: Number of records per page
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          nullable: false
      - name: sort
        in: query
        description: Sorting parameters
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                required:
                - _embedded
                - _links
                - page
                type: object
                properties:
                  _embedded:
                    required:
                    - users
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserWithLinks'
                  _links:
                    required:
                    - profile
                    - search
                    - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/Link'
                      profile:
                        $ref: '#/components/schemas/Link'
                      search:
                        $ref: '#/components/schemas/Link'
                  page:
                    required:
                    - number
                    - size
                    - totalElements
                    - totalPages
                    type: object
                    properties:
                      size:
                        minimum: 0
                        type: integer
                        format: int32
                        nullable: false
                      totalElements:
                        minimum: 0
                        type: integer
                        format: int64
                        nullable: false
                      totalPages:
                        minimum: 0
                        type: integer
                        format: int32
                        nullable: false
                      number:
                        minimum: 0
                        type: integer
                        format: int32
                        nullable: false
    post:
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
        required: true
      responses:
        "200":
          description: Entity has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithLinks'
        "204":
          description: Entity has been created
  /users/{id}:
    get:
      tags:
      - User
      description: Retrieves an entity by its id
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Entity is present
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithLinks'
        "404":
          description: Entity is missing
    put:
      tags:
      - User
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        "204":
          description: Entity has been updated
    delete:
      tags:
      - User
      description: Deletes the entity with the given id
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Entity has been deleted or already didn't exists
    patch:
      tags:
      - User
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
        required: true
      responses:
        "204":
          description: Entity has been updated
  /users/{id}/userProjectRoles:
    get:
      tags:
      - User
      parameters:
      - name: id
        in: path
        description: Entity ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                required:
                - _embedded
                - _links
                - page
                type: object
                properties:
                  _embedded:
                    required:
                    - userProjectRoles
                    type: object
                    properties:
                      userProjectRoles:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserProjectRoleWithLinks'
                  _links:
                    required:
                    - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/Link'
        "404":
          description: Entity is missing
components:
  schemas:
    Link:
      type: object
      properties:
        deprecation:
          type: string
          nullable: false
        href:
          type: string
          nullable: false
        hreflang:
          type: string
          nullable: false
        media:
          type: string
          nullable: false
        name:
          type: string
          nullable: false
        profile:
          type: string
          nullable: false
        rel:
          type: string
          nullable: false
        templated:
          type: boolean
          nullable: false
        title:
          type: string
          nullable: false
        type:
          type: string
          nullable: false
    List:
      required:
      - empty
      type: object
      properties:
        empty:
          type: boolean
          nullable: false
    NewProjectRequest:
      required:
      - label
      type: object
      properties:
        label:
          type: string
          nullable: false
        projectId:
          type: string
          format: uuid
          nullable: true
    NewUserProjectRoleRequest:
      required:
      - project
      - role
      - user
      type: object
      properties:
        project:
          type: string
          nullable: false
        role:
          type: string
          nullable: false
        user:
          type: string
          nullable: false
        userProjectRoleId:
          type: string
          format: uuid
          nullable: false
    NewUserRequest:
      required:
      - name
      - username
      type: object
      properties:
        email:
          type: string
          nullable: true
        name:
          type: string
          nullable: false
        username:
          type: string
          nullable: false
    Project:
      required:
      - label
      - projectId
      type: object
      properties:
        label:
          type: string
          nullable: false
        projectId:
          type: string
          format: uuid
          nullable: false
    ProjectLinks:
      required:
      - _links
      type: object
      properties:
        _links:
          type: object
          properties:
            project:
              $ref: '#/components/schemas/Link'
            self:
              $ref: '#/components/schemas/Link'
    ProjectPatch:
      type: object
      properties:
        label:
          type: string
        projectId:
          type: string
          format: uuid
    ProjectRequest:
      required:
      - label
      type: object
      properties:
        label:
          type: string
          nullable: false
        projectId:
          type: string
          format: uuid
          nullable: true
    ProjectWithLinks:
      allOf:
      - $ref: '#/components/schemas/Project'
      - $ref: '#/components/schemas/ProjectLinks'
    User:
      required:
      - email
      - name
      - username
      type: object
      properties:
        email:
          type: string
          nullable: true
        name:
          type: string
          nullable: false
        username:
          type: string
          nullable: false
    UserLinks:
      required:
      - _links
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
            user:
              $ref: '#/components/schemas/Link'
    UserPatch:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        username:
          type: string
    UserProjectRole:
      required:
      - projectId
      - role
      - userProjectRoleId
      - username
      type: object
      properties:
        projectId:
          type: string
          format: uuid
          nullable: false
        role:
          type: string
          nullable: false
        userProjectRoleId:
          type: string
          format: uuid
          nullable: false
        username:
          type: string
          nullable: false
    UserProjectRoleLinks:
      required:
      - _links
      type: object
      properties:
        _links:
          type: object
          properties:
            project:
              $ref: '#/components/schemas/Link'
            self:
              $ref: '#/components/schemas/Link'
            user:
              $ref: '#/components/schemas/Link'
            userProjectRole:
              $ref: '#/components/schemas/Link'
    UserProjectRolePatch:
      type: object
      properties:
        project:
          type: string
        projectId:
          type: string
          format: uuid
        role:
          type: string
        user:
          type: string
        userProjectRoleId:
          type: string
          format: uuid
        username:
          type: string
    UserProjectRoleRequest:
      required:
      - project
      - role
      - user
      type: object
      properties:
        project:
          type: string
          nullable: false
        role:
          type: string
          nullable: false
        user:
          type: string
          nullable: false
        userProjectRoleId:
          type: string
          format: uuid
          nullable: false
    UserProjectRoleWithLinks:
      allOf:
      - $ref: '#/components/schemas/UserProjectRole'
      - $ref: '#/components/schemas/UserProjectRoleLinks'
    UserRequest:
      required:
      - name
      - username
      type: object
      properties:
        email:
          type: string
          nullable: true
        name:
          type: string
          nullable: false
        username:
          type: string
          nullable: false
    UserWithLinks:
      allOf:
      - $ref: '#/components/schemas/User'
      - $ref: '#/components/schemas/UserLinks'
